# Task ID: 1
# Title: Setup Project Repository and Docker Environment with uv and FastAPI
# Status: pending
# Dependencies: None
# Priority: high
# Description: Initialize the project repository, set up Dockerfile, and configure the base environment for the microservice using 'uv' as the Python dependency manager and FastAPI as the API framework.
# Details:
- Initialize a git repository and create a project structure (src, tests, Docker, etc.).
- Use 'uv' to manage Python dependencies; create pyproject.toml and requirements files as needed.
- Write a Dockerfile that installs Python 3.11+, FFmpeg, Redis client, and sets up 'uv' and FastAPI.
- Ensure Dockerfile includes HEALTHCHECK directive for orchestration.
- Add .dockerignore and .gitignore files.
- Use environment variables for secrets (OpenAI key, Redis URL).
- Scaffold FastAPI application entrypoint (e.g., main.py) and ensure it is used as the API server.

# Test Strategy:
- Build Docker image and run container.
- Validate that FFmpeg and Redis CLI are available in the container.
- Check that healthcheck endpoint is reachable.
- Confirm FastAPI application starts and responds to root or /healthz endpoint.

# Subtasks:
## 1. Initialize Git Repository [done]
### Dependencies: None
### Description: Set up a new Git repository to manage project version control.
### Details:
Run 'git init' in the project directory and make the initial commit.

## 2. Create Project Structure [in-progress]
### Dependencies: 1.1
### Description: Establish the necessary folders and files for the project.
### Details:
Create directories such as 'src', 'tests', and any other required folders. Add placeholder files as needed.

## 3. Write Dockerfile [pending]
### Dependencies: 1.2
### Description: Create a Dockerfile to define the application's container image.
### Details:
Write a Dockerfile specifying the base image, copying files, installing dependencies, and setting the entrypoint.

## 4. Add .dockerignore and .gitignore Files [pending]
### Dependencies: 1.2
### Description: Create .dockerignore and .gitignore files to exclude unnecessary files from Docker builds and Git commits.
### Details:
List files and directories to ignore in both .dockerignore and .gitignore according to best practices.

## 5. Configure Environment Variables [pending]
### Dependencies: 1.3, 1.4
### Description: Set up environment variable configuration for the project.
### Details:
Create a .env file or similar mechanism to manage environment variables and ensure they are referenced in the Dockerfile and application code.

## 6. Implement Docker HEALTHCHECK [pending]
### Dependencies: 1.3, 1.5
### Description: Add a HEALTHCHECK instruction to the Dockerfile to monitor container health.
### Details:
Define a HEALTHCHECK command in the Dockerfile that verifies the application is running correctly.

